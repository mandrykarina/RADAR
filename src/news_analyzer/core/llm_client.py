import json
import os
from typing import Dict, List
from openai import AsyncOpenAI

from news_analyzer.config.prompts import (
    ENTITY_EXTRACTION_PROMPT,
    WHY_NOW_PROMPT,
    DRAFT_GENERATION_PROMPT,
    TIMELINE_PROMPT,
    HEADLINE_GENERATION_PROMPT
)
from news_analyzer.models.data_models import ExtractedEntities, ArticleDraft, TimelineEvent
from news_analyzer.utils.cache import CacheManager


class LLMClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI API —á–µ—Ä–µ–∑ OpenRouter.ai"""

    def __init__(self):
        self.api_key = os.getenv('OPENAI_API_KEY')
        if not self.api_key:
            raise ValueError("OPENAI_API_KEY not set in environment variables")

        self.base_url = "https://openrouter.ai/api/v1"
        self.client = AsyncOpenAI(api_key=self.api_key, base_url=self.base_url)

        self.model = os.getenv('OPENAI_MODEL', 'gpt-3.5-turbo')
        self.max_tokens = int(os.getenv('OPENAI_MAX_TOKENS', 1500))
        self.api_calls_count = 0
        self.cache = CacheManager()

    async def _make_api_call(self, messages: List[Dict], temperature: float = 0.3) -> str:
        """API –≤—ã–∑–æ–≤ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""

        cache_key = self._create_cache_key(messages, temperature)

        cached_result = await self.cache.get(cache_key)
        if cached_result:
            print("üíæ –ö–µ—à")
            return cached_result

        try:
            self.api_calls_count += 1
            print(f"ü§ñ API –≤—ã–∑–æ–≤ #{self.api_calls_count}")

            response = await self.client.chat.completions.create(
                model=self.model,
                messages=messages,
                max_tokens=self.max_tokens,
                temperature=temperature,
                timeout=30.0
            )

            result = response.choices[0].message.content

            await self.cache.set(cache_key, result)

            return result

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ API –≤—ã–∑–æ–≤–∞: {e}")
            raise

    def _create_cache_key(self, messages: List[Dict], temperature: float) -> str:
        import hashlib
        content = json.dumps(messages, sort_keys=True) + str(temperature)
        return hashlib.md5(content.encode()).hexdigest()

    async def extract_entities(self, news_text: str) -> ExtractedEntities:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ —Ç–µ–∫—Å—Ç–∞ –Ω–æ–≤–æ—Å—Ç–∏"""

        messages = [{
            "role": "user",
            "content": ENTITY_EXTRACTION_PROMPT.format(news_text=news_text)
        }]

        try:
            response = await self._make_api_call(messages)
            entities_data = json.loads(response)
            return ExtractedEntities(**entities_data)

        except (json.JSONDecodeError, Exception) as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π: {e}")
            return ExtractedEntities()

    async def generate_why_now(self, news_text: str, context: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è \"–ø–æ—á–µ–º—É —Å–µ–π—á–∞—Å\""""

        messages = [{
            "role": "user",
            "content": WHY_NOW_PROMPT.format(news_text=news_text, context=context)
        }]

        try:
            response = await self._make_api_call(messages, temperature=0.5)
            return response.strip()

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ why_now: {e}")
            return "–ó–Ω–∞—á–∏–º–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º —Ä—ã–Ω–∫–µ"

    async def generate_draft(self, news_text: str, entities: ExtractedEntities, why_now: str) -> ArticleDraft:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞ —Å—Ç–∞—Ç—å–∏"""

        entities_str = json.dumps(entities.model_dump(), ensure_ascii=False)

        messages = [{
            "role": "user",
            "content": DRAFT_GENERATION_PROMPT.format(
                news_text=news_text,
                entities=entities_str,
                why_now=why_now
            )
        }]

        try:
            response = await self._make_api_call(messages, temperature=0.4)
            draft_data = json.loads(response)
            return ArticleDraft(**draft_data)

        except (json.JSONDecodeError, Exception) as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞: {e}")
            return ArticleDraft(
                headline="–í–∞–∂–Ω–æ–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ",
                lead="–ü—Ä–æ–∏–∑–æ—à–ª–æ –∑–Ω–∞—á–∏–º–æ–µ —Å–æ–±—ã—Ç–∏–µ –Ω–∞ —Ä—ã–Ω–∫–∞—Ö.",
                bullets=["–î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è", "–í–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä—ã–Ω–æ–∫", "–†–µ–∞–∫—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"],
                quote="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–∂–∏–¥–∞–µ—Ç—Å—è"
            )

    async def generate_headline(self, news_text: str, entities: ExtractedEntities) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏—è"""

        entities_list = []
        if entities.companies:
            entities_list.extend([comp.get('name', '') for comp in entities.companies])
        if entities.countries:
            entities_list.extend(entities.countries[:2])

        entities_str = ', '.join(entities_list[:3])

        messages = [{
            "role": "user",
            "content": HEADLINE_GENERATION_PROMPT.format(
                news_text=news_text[:500],
                entities_str=entities_str
            )
        }]

        try:
            response = await self._make_api_call(messages, temperature=0.3)
            return response.strip()[:50]

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}")
            return "–í–∞–∂–Ω–æ–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ"

    async def build_timeline(self, news_articles: List) -> List[TimelineEvent]:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã —Å–æ–±—ã—Ç–∏–π"""

        articles_data = []
        for article in news_articles:
            articles_data.append({
                'time': article.published_at.isoformat(),
                'title': article.title,
                'content': article.content[:200]
            })

        articles_str = json.dumps(articles_data, ensure_ascii=False, indent=2)

        messages = [{
            "role": "user",
            "content": TIMELINE_PROMPT.format(news_group=articles_str)
        }]

        try:
            response = await self._make_api_call(messages)
            timeline_data = json.loads(response)

            timeline_events = []
            for event_data in timeline_data.get('timeline', []):
                try:
                    from datetime import datetime
                    timeline_events.append(TimelineEvent(
                        time=datetime.fromisoformat(event_data['time'].replace('Z', '+00:00')),
                        event=event_data['event']
                    ))
                except Exception:
                    continue

            return timeline_events

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã: {e}")

            if news_articles:
                return [TimelineEvent(
                    time=news_articles[0].published_at,
                    event="–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–∏"
                )]

            return []
