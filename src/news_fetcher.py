#!/usr/bin/env python3
"""
üî¨ SURGICAL FIX + TWELVE DATA INTEGRATION
============================================
‚úÇÔ∏è FMP –ü–û–õ–ù–û–°–¢–¨–Æ –£–î–ê–õ–ï–ù
üÜï TWELVE DATA –î–û–ë–ê–í–õ–ï–ù
‚úÖ –§–∏–ª—å—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç
"""
import time
import json
import os
import threading
import re
from datetime import datetime, timedelta
from typing import Dict, Any, List

from clients.newsapi_client import NewsApiClient
from clients.polygon_client import PolygonClient  
from clients.finnhub_client import FinnHubClient
from clients.twelve_data_client import TwelveDataClient  # üÜï –ù–û–í–´–ô –ò–ú–ü–û–†–¢
from clients.newsdata_client import NewsDataClient

from config import API_KEYS, RATE_LIMITS, CONTENT_FILTERS, FILTER_SETTINGS, SEARCH_CONFIG


class SurgicalTwelveDataFetcher:
    """üî¨ –•–ò–†–£–†–ì–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° TWELVE DATA"""

    def __init__(self):
        print("üî¨ SURGICAL FIX + TWELVE DATA INTEGRATION")
        print("‚úÇÔ∏è FMP —É–¥–∞–ª–µ–Ω, üÜï Twelve Data –¥–æ–±–∞–≤–ª–µ–Ω")

        self.clients = {}
        self.request_counts = {
            'newsapi': 0, 'polygon': 0, 'finnhub': 0, 
            'twelve_data': 0,  # üÜï –ù–û–í–´–ô –°–ß–ï–¢–ß–ò–ö
            'newsdata': 0
        }

        self.last_requests = {
            'newsapi': datetime.min, 'polygon': datetime.min, 'finnhub': datetime.min, 
            'twelve_data': datetime.min,  # üÜï –ù–û–í–û–ï –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï
            'newsdata': datetime.min
        }

        self.fixed_filenames = {
            'newsapi': 'news_newsapi_latest.json',
            'polygon': 'news_polygon_latest.json', 
            'finnhub': 'news_finnhub_latest.json',
            'twelve_data': 'news_twelve_data_latest.json',  # üÜï –ù–û–í–´–ô –§–ê–ô–õ
            'newsdata': 'news_newsdata_latest.json'
        }

        self._init_clients()
        print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç–æ–≤ –≥–æ—Ç–æ–≤–æ: {len(self.clients)}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        if FILTER_SETTINGS.get("apply_filters", True):
            print("üîç –§–∏–ª—å—Ç—Ä—ã –í–ö–õ–Æ–ß–ï–ù–´:")
            print(f"   ‚Ä¢ –ò—Å–∫–ª—é—á–∞–µ–º: {len(CONTENT_FILTERS.get('exclude_keywords', []))} —Å–ø–∞–º-—Å–ª–æ–≤")
            print(f"   ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {len(CONTENT_FILTERS.get('priority_keywords', []))} –≤–∞–∂–Ω—ã—Ö —Å–ª–æ–≤")

    def _init_clients(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ - FMP –£–î–ê–õ–ï–ù, Twelve Data –î–û–ë–ê–í–õ–ï–ù"""
        apis = [
            ('newsapi', NewsApiClient), 
            ('polygon', PolygonClient), 
            ('finnhub', FinnHubClient), 
            ('twelve_data', TwelveDataClient),  # üÜï –ù–û–í–´–ô –ö–õ–ò–ï–ù–¢
            ('newsdata', NewsDataClient)
        ]

        for api_name, ClientClass in apis:
            try:
                key = API_KEYS.get(api_name, "")
                if key and not key.startswith("YOUR_"):
                    self.clients[api_name] = ClientClass(key)
                    print(f"‚úÖ {api_name.upper()}")
                else:
                    print(f"‚ö†Ô∏è {api_name.upper()}: –ù–µ—Ç API –∫–ª—é—á–∞")
            except Exception as e:
                print(f"‚ùå {api_name.upper()}: {e}")

    def can_make_request(self, api_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤"""
        try:
            now = datetime.now()
            last = self.last_requests[api_name]
            passed = (now - last).total_seconds()

            return passed >= RATE_LIMITS.get(api_name, 60)
        except:
            return True

    def apply_content_filters(self, articles: List[Dict], api_name: str) -> List[Dict]:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ - TWELVE DATA –ü–û–î–î–ï–†–ñ–ê–ù"""

        if not FILTER_SETTINGS.get("apply_filters", True):
            return articles

        if not articles:
            return articles

        filtered_articles = []
        exclude_keywords = [kw.lower() for kw in CONTENT_FILTERS.get("exclude_keywords", [])]
        priority_keywords = [kw.lower() for kw in CONTENT_FILTERS.get("priority_keywords", [])]
        min_title_len = CONTENT_FILTERS.get("min_title_length", 15)
        max_title_len = CONTENT_FILTERS.get("max_title_length", 200)
        min_desc_len = CONTENT_FILTERS.get("min_description_length", 20)

        for article in articles:
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç API
                title = ""
                description = ""

                if api_name == "newsapi":
                    title = article.get("title", "") or ""
                    description = article.get("description", "") or ""
                elif api_name == "polygon":
                    title = article.get("title", "") or ""
                    description = article.get("description", "") or ""
                elif api_name == "finnhub":
                    title = article.get("headline", "") or ""
                    description = article.get("summary", "") or ""
                elif api_name == "twelve_data":  # üÜï –ù–û–í–´–ô –°–õ–£–ß–ê–ô
                    title = article.get("title", "") or ""
                    description = article.get("description", "") or ""
                elif api_name == "newsdata":
                    title = article.get("title", "") or ""
                    description = article.get("description", "") or ""

                if not title:
                    continue

                title_lower = title.lower()
                desc_lower = description.lower() if description else ""

                # –§–∏–ª—å—Ç—Ä 1: –î–ª–∏–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                if len(title) < min_title_len or len(title) > max_title_len:
                    continue

                # –§–∏–ª—å—Ç—Ä 2: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è  
                if description and len(description) < min_desc_len:
                    continue

                # –§–∏–ª—å—Ç—Ä 3: –ò—Å–∫–ª—é—á–∞–µ–º—ã–µ —Å–ª–æ–≤–∞
                if any(exclude_word in title_lower for exclude_word in exclude_keywords):
                    continue

                if description and any(exclude_word in desc_lower for exclude_word in exclude_keywords):
                    continue

                # –§–∏–ª—å—Ç—Ä 4: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ (–ø–æ–º–µ—á–∞–µ–º)
                if FILTER_SETTINGS.get("mark_priority", True):
                    if any(priority_word in title_lower for priority_word in priority_keywords):
                        article["_priority"] = True
                        article["_priority_reason"] = "Important keywords in title"

                # –°—Ç–∞—Ç—å—è –ø—Ä–æ—à–ª–∞ –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
                filtered_articles.append(article)

            except Exception as e:
                continue

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        if FILTER_SETTINGS.get("sort_by_priority", True):
            filtered_articles.sort(key=lambda x: x.get("_priority", False), reverse=True)

        return filtered_articles

    def fetch_with_timeout(self, api_name: str) -> Dict[str, Any]:
        """–ó–∞–ø—Ä–æ—Å —Å timeout –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π - TWELVE DATA –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù"""

        result = {"source": api_name, "error": "timeout", "articles_count": 0}

        def _fetch():
            nonlocal result
            try:
                print(f"üì° {api_name.upper()}...", end=" ", flush=True)

                if api_name == "newsapi":
                    config = SEARCH_CONFIG.get("newsapi", {})
                    to_date = datetime.now()
                    from_date = to_date - timedelta(hours=24)

                    data = self.clients["newsapi"].get_everything(
                        q=config.get("query", "finance"),
                        language=config.get("language", "en"),
                        from_param=from_date.strftime("%Y-%m-%d"),
                        to=to_date.strftime("%Y-%m-%d"),
                        page_size=config.get("page_size", 15)
                    )

                elif api_name == "polygon":
                    config = SEARCH_CONFIG.get("polygon", {})
                    data = self.clients["polygon"].get_market_news(
                        limit=config.get("limit", 8)
                    )

                elif api_name == "finnhub":
                    config = SEARCH_CONFIG.get("finnhub", {})
                    data = self.clients["finnhub"].general_news(
                        config.get("category", "general")
                    )

                elif api_name == "twelve_data":  # üÜï –ù–û–í–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø
                    config = SEARCH_CONFIG.get("twelve_data", {})
                    data = self.clients["twelve_data"].get_latest_news(
                        size=config.get("outputsize", 10)
                    )
                    # Twelve Data –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∂–µ –≥–æ—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫

                elif api_name == "newsdata":
                    config = SEARCH_CONFIG.get("newsdata", {})
                    data = self.clients["newsdata"].latest_news(
                        category="business",
                        size=config.get("size", 8)
                    )

                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç—å–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                articles = []
                if api_name == "twelve_data":
                    # Twelve Data —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π
                    articles = data if isinstance(data, list) else []
                elif isinstance(data, dict):
                    if api_name == "newsapi":
                        articles = data.get("articles", [])
                    elif api_name in ["polygon", "newsdata"]:
                        articles = data.get("results", [])
                elif isinstance(data, list):
                    articles = data

                # –ü–†–ò–ú–ï–ù–Ø–ï–ú –§–ò–õ–¨–¢–†–´
                filtered_articles = self.apply_content_filters(articles, api_name)

                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å—Ç–∞—Ç—å—è–º–∏
                if api_name == "twelve_data":
                    # –î–ª—è Twelve Data –ø—Ä–æ—Å—Ç–æ –∑–∞–º–µ–Ω—è–µ–º
                    data = filtered_articles
                elif isinstance(data, dict):
                    if api_name == "newsapi":
                        data["articles"] = filtered_articles
                        data["totalResults"] = len(filtered_articles)
                    elif api_name in ["polygon", "newsdata"]:
                        data["results"] = filtered_articles
                        if api_name == "polygon":
                            data["count"] = len(filtered_articles)
                        else:
                            data["totalResults"] = len(filtered_articles)
                elif isinstance(data, list):
                    data = filtered_articles

                count = len(filtered_articles)

                result = {
                    "source": api_name,
                    "timestamp": datetime.now().isoformat(),
                    "request_number": self.request_counts[api_name] + 1,
                    "articles_count": count,
                    "filtered": True,
                    "filter_stats": {
                        "original_count": len(articles),
                        "filtered_count": count,
                        "removed_count": len(articles) - count
                    },
                    "raw_data": data
                }

                priority_count = len([a for a in filtered_articles if a.get("_priority", False)])
                if priority_count > 0:
                    result["priority_articles"] = priority_count

                print(f"‚úÖ {count} ({len(articles)-count} —É–±—Ä–∞–Ω–æ)", flush=True)

            except Exception as e:
                print(f"‚ùå {str(e)[:30]}...", flush=True)
                result = {"source": api_name, "error": str(e)[:100]}

        # –ó–∞–ø—É—Å–∫ —Å timeout
        thread = threading.Thread(target=_fetch, daemon=True)
        thread.start()
        thread.join(timeout=10.0)

        if thread.is_alive():
            print(f"‚è∞ TIMEOUT!", flush=True)
            result = {"source": api_name, "error": "Timeout 10 —Å–µ–∫—É–Ω–¥"}

        return result

    def save_fast(self, result: Dict[str, Any]):
        """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
        try:
            api_name = result.get("source", "unknown")
            filename = self.fixed_filenames.get(api_name, f"news_{api_name}_latest.json")

            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(result, f, ensure_ascii=False, indent=2)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            if "filter_stats" in result:
                stats = result["filter_stats"]
                priority = result.get("priority_articles", 0)
                priority_text = f", {priority} –≤–∞–∂–Ω—ã—Ö" if priority > 0 else ""
                print(f"üíæ {filename} ({stats['filtered_count']}/{stats['original_count']}{priority_text})")
            else:
                print(f"üíæ {filename}")

        except Exception as e:
            print(f"‚ùå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {e}")

    def run_cycle(self):
        """–¶–∏–∫–ª —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π - FMP –£–î–ê–õ–ï–ù, Twelve Data –î–û–ë–ê–í–õ–ï–ù"""
        total_requests = sum(self.request_counts.values()) + 1
        print(f"\nüîÑ –¶–∏–∫–ª #{total_requests} - {datetime.now().strftime('%H:%M:%S')}")

        # ‚úÇÔ∏è FMP –£–î–ê–õ–ï–ù –∏–∑ —Å–ø–∏—Å–∫–∞
        apis = ['newsapi', 'polygon', 'finnhub', 'twelve_data', 'newsdata']  # üÜï twelve_data –¥–æ–±–∞–≤–ª–µ–Ω
        completed = 0

        for api_name in apis:
            if api_name in self.clients and self.can_make_request(api_name):

                result = self.fetch_with_timeout(api_name)

                if "error" not in result:
                    self.save_fast(result)
                    self.request_counts[api_name] += 1
                    self.last_requests[api_name] = datetime.now()
                    completed += 1

                time.sleep(0.1)

        if completed > 0:
            print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed} –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π")
        else:
            print("‚è∞ –í—Å–µ –Ω–∞ cooldown")

        return completed > 0

    def run_forever(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å Twelve Data"""
        print("\nüîÑ –ú–û–ù–ò–¢–û–†–ò–ù–ì + TWELVE DATA INTEGRATION")
        print("‚úÇÔ∏è FMP —É–¥–∞–ª–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞")
        print("üÜï Twelve Data –¥–æ–±–∞–≤–ª–µ–Ω —Å market movers")
        print("üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ø–∞–º–∞ –≤–∫–ª—é—á–µ–Ω–∞")
        print("Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")

        cycle_count = 0

        try:
            while True:
                cycle_count += 1
                print(f"\n>>> –¶–ò–ö–õ #{cycle_count} <<<")

                try:
                    self.run_cycle()

                    print("‚è∞ –ü–∞—É–∑–∞ 5 —Å–µ–∫...")
                    for i in range(5):
                        time.sleep(1)
                        if i == 2:
                            print(".", end="", flush=True)
                    print()

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞: {e}")
                    time.sleep(1)

        except KeyboardInterrupt:
            print("\n\nüõë –û–°–¢–ê–ù–û–í–õ–ï–ù–û")
            print(f"–¶–∏–∫–ª–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {cycle_count}")


def main():
    print("üî¨ SURGICAL FIX + TWELVE DATA INTEGRATION")
    print("=" * 50)

    try:
        fetcher = SurgicalTwelveDataFetcher()

        if not fetcher.clients:
            print("\n‚ùå –ù–µ—Ç API –∫–ª—é—á–µ–π!")
            return

        print("\nüî¨ –•–ò–†–£–†–ì–ò–ß–ï–°–ö–ò–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø:")
        print("‚úÇÔ∏è FMP –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω (–ø—Ä–æ–±–ª–µ–º–Ω—ã–π)")
        print("üÜï Twelve Data –¥–æ–±–∞–≤–ª–µ–Ω (market movers)")
        print("‚úÖ –§–∏–ª—å—Ç—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –¥–ª—è –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        print("‚ö° –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")

        print("\n–†–µ–∂–∏–º—ã:")
        print("1 - –¢–µ—Å—Ç–æ–≤—ã–π —Ü–∏–∫–ª")
        print("2 - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å Twelve Data")

        choice = input("\n–í—ã–±–æ—Ä (1-2): ").strip()

        if choice == "1":
            fetcher.run_cycle()
        else:
            fetcher.run_forever()

    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()
