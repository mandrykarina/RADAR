"""Twelve Data Client - –ò–°–ü–†–ê–í–õ–ï–ù–ê –°–ò–ù–¢–ê–ö–°–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –ë–ï–°–ü–õ–ê–¢–ù–´–ï endpoints
"""
import requests

class TwelveDataClient:
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.base_url = "https://api.twelvedata.com"

    def get_latest_news(self, symbol: str = "AAPL", size: int = 10):
        """
        –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–û –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ë–ï–°–ü–õ–ê–¢–ù–´–ï endpoints
        –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º –∞–∫—Ü–∏—è–º –∫–∞–∫ "–Ω–æ–≤–æ—Å—Ç–∏ –æ –¥–≤–∏–∂–µ–Ω–∏—è—Ö"
        """
        print(f"üîç TWELVE DATA: –ó–∞–ø—Ä–æ—Å —Ü–µ–Ω —Ç–æ–ø –∞–∫—Ü–∏–π –∫–∞–∫ '–Ω–æ–≤–æ—Å—Ç–∏'")

        # –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        symbols = [
            "AAPL", "MSFT", "GOOGL", "AMZN", "TSLA", "META", "NVDA", "JPM",][:size]

        news_items = []

        for symbol in symbols:
            try:
                url = f"{self.base_url}/price"
                params = {
                    'symbol': symbol,
                    'apikey': self.api_key
                }

                print(f"üîó TWELVE DATA: –ó–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã –¥–ª—è {symbol}")

                response = requests.get(url, params=params, timeout=5)


                print(f"üì° {symbol}: status_code={response.status_code}")
                if response.status_code != 200:
                    print(f"‚ùå {symbol}: {response.text[:100]}")

                if response.status_code == 200:
                    result = response.json()

                    # ‚Üê –ò –≠–¢–ò –°–¢–†–û–ö–ò:
                    print(f"üìä {symbol}: response={result}")

                    if 'price' in result:
                        # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥

                        # –°–æ–∑–¥–∞–µ–º "–Ω–æ–≤–æ—Å—Ç—å" –∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ
                        news_item = {
                            'title': f"{symbol} Current Price Update",
                            'description': f"Current price: ${result['price']}. Last updated price data for {symbol}.",
                            'symbol': symbol,
                            'price': result['price'],
                            'datetime': result.get('datetime', 'N/A'),
                            'source': 'twelve_data_price'
                        }
                        news_items.append(news_item)

            except Exception as e:
                print(f"üí• TWELVE DATA {symbol} –æ—à–∏–±–∫–∞: {e}")
                continue

        if news_items:
            print(f"‚úÖ TWELVE DATA –£—Å–ø–µ—Ö: {len(news_items)} —Ü–µ–Ω–æ–≤—ã—Ö '–Ω–æ–≤–æ—Å—Ç–µ–π'")
        else:
            print(f"‚ùå TWELVE DATA: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")

        return news_items

    def get_market_news(self, market: str = "stocks", size: int = 10):

        return self.get_latest_news(size=size)
