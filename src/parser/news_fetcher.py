#!/usr/bin/env python3
"""
ULTRA STABLE - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ò–°–ê–ù–ò–Ø –ù–ê 11 –¶–ò–ö–õ–ï
–ü—Ä–æ–±–ª–µ–º–∞: –∑–∞–≤–∏—Å–∞–Ω–∏–µ –ø–æ—Å–ª–µ Polygon/NewsAPI
–†–µ—à–µ–Ω–∏–µ: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ timeout, –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
"""
import time
import json
import os
import signal
import threading
from datetime import datetime, timedelta
from typing import Dict, Any

from clients.newsapi_client import NewsApiClient
from clients.polygon_client import PolygonClient  
from clients.finnhub_client import FinnHubClient
from clients.fmp_client import FMPClient
from clients.newsdata_client import NewsDataClient

from config import API_KEYS, RATE_LIMITS


class UltraStableFetcher:
    """–£–õ–¨–¢–†–ê –°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø - –ù–ï –ó–ê–í–ò–°–ê–ï–¢!"""

    def __init__(self):
        print("üö® ULTRA STABLE NEWS FETCHER")
        print("‚ö° –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –∑–∞–≤–∏—Å–∞–Ω–∏–π")

        self.clients = {}
        self.request_counts = {
            'newsapi': 0, 'polygon': 0, 'finnhub': 0, 'fmp': 0, 'newsdata': 0
        }

        self.last_requests = {
            'newsapi': datetime.min, 'polygon': datetime.min, 'finnhub': datetime.min, 
            'fmp': datetime.min, 'newsdata': datetime.min
        }

        # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        self.fixed_filenames = {
            'newsapi': 'news_newsapi_latest.json',
            'polygon': 'news_polygon_latest.json', 
            'finnhub': 'news_finnhub_latest.json',
            'fmp': 'news_fmp_latest.json',
            'newsdata': 'news_newsdata_latest.json'
        }

        self._init_clients()
        print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç–æ–≤ –≥–æ—Ç–æ–≤–æ: {len(self.clients)}")

    def _init_clients(self):
        """–ë—ã—Å—Ç—Ä–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""

        apis = [('newsapi', NewsApiClient), ('polygon', PolygonClient), 
                ('finnhub', FinnHubClient), ('fmp', FMPClient), ('newsdata', NewsDataClient)]

        for api_name, ClientClass in apis:
            try:
                key = API_KEYS.get(api_name, "")
                if key and key != f"YOUR_{api_name.upper()}_KEY_HERE":
                    self.clients[api_name] = ClientClass(key)
                    print(f"‚úÖ {api_name.upper()}")
            except Exception as e:
                print(f"‚ùå {api_name.upper()}: {e}")

    def can_make_request(self, api_name: str) -> bool:
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤"""
        try:
            now = datetime.now()
            last = self.last_requests[api_name]
            passed = (now - last).total_seconds()

            return passed >= RATE_LIMITS.get(api_name, 60)
        except:
            return True

    def fetch_with_timeout(self, api_name: str) -> Dict[str, Any]:
        """–ù–û–í–û–ï: –ó–∞–ø—Ä–æ—Å —Å –∂–µ—Å—Ç–∫–∏–º timeout —á–µ—Ä–µ–∑ threading"""

        result = {"source": api_name, "error": "timeout", "articles_count": 0}

        def _fetch():
            nonlocal result
            try:
                print(f"üì° {api_name.upper()}...", end=" ", flush=True)

                if api_name == "newsapi":
                    to_date = datetime.now()
                    from_date = to_date - timedelta(hours=24)

                    data = self.clients["newsapi"].get_everything(
                        q="finance",
                        language="en",
                        from_param=from_date.strftime("%Y-%m-%d"),
                        to=to_date.strftime("%Y-%m-%d"),
                        page_size=10
                    )

                elif api_name == "polygon":
                    data = self.clients["polygon"].get_market_news(limit=5)

                elif api_name == "finnhub":
                    data = self.clients["finnhub"].general_news("general")

                elif api_name == "fmp":
                    data = self.clients["fmp"].get_general_news(page=0, size=5)

                elif api_name == "newsdata":
                    data = self.clients["newsdata"].latest_news(category="business", size=5)

                # –ü–æ–¥—Å—á–µ—Ç –±—ã—Å—Ç—Ä–æ
                count = 0
                if isinstance(data, dict):
                    if api_name == "newsapi":
                        count = len(data.get("articles", []))
                    elif api_name in ["polygon", "newsdata"]:
                        count = len(data.get("results", []))
                elif isinstance(data, list):
                    count = len(data)

                result = {
                    "source": api_name,
                    "timestamp": datetime.now().isoformat(),
                    "request_number": self.request_counts[api_name] + 1,
                    "articles_count": count,
                    "raw_data": data
                }

                print(f"‚úÖ {count}", flush=True)

            except Exception as e:
                print(f"‚ùå {str(e)[:30]}...", flush=True)
                result = {
                    "source": api_name,
                    "error": str(e)[:100]
                }

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å timeout
        thread = threading.Thread(target=_fetch, daemon=True)
        thread.start()
        thread.join(timeout=8.0)  # –ñ–ï–°–¢–ö–ò–ô timeout 8 —Å–µ–∫—É–Ω–¥

        if thread.is_alive():
            print(f"‚è∞ TIMEOUT!", flush=True)
            result = {
                "source": api_name,
                "error": "Timeout 8 —Å–µ–∫—É–Ω–¥",
                "articles_count": 0
            }

        return result

    def save_fast(self, result: Dict[str, Any]):
        """–ë–´–°–¢–†–û–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""
        try:
            api_name = result.get("source", "unknown")
            filename = self.fixed_filenames.get(api_name, f"news_{api_name}_latest.json")

            # –ë—ã—Å—Ç—Ä–∞—è –∑–∞–ø–∏—Å—å
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(result, f, ensure_ascii=False, indent=None)  # –ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

            print(f"üíæ {filename}", flush=True)

        except Exception as e:
            print(f"‚ùå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {e}", flush=True)

    def run_cycle(self):
        """–£–õ–¨–¢–†–ê-–ë–´–°–¢–†–´–ô —Ü–∏–∫–ª –±–µ–∑ –∑–∞–≤–∏—Å–∞–Ω–∏–π"""
        total_requests = sum(self.request_counts.values()) + 1
        print(f"\nüîÑ –¶–∏–∫–ª #{total_requests} - {datetime.now().strftime('%H:%M:%S')}")

        apis = ['newsapi', 'polygon', 'finnhub', 'fmp', 'newsdata']
        completed = 0

        for api_name in apis:
            if api_name in self.clients and self.can_make_request(api_name):

                result = self.fetch_with_timeout(api_name)

                if "error" not in result:
                    self.save_fast(result)
                    self.request_counts[api_name] += 1
                    self.last_requests[api_name] = datetime.now()
                    completed += 1

                # –ú–∏–∫—Ä–æ-–ø–∞—É–∑–∞
                time.sleep(0.1)

        if completed > 0:
            print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed} –∑–∞–ø—Ä–æ—Å–æ–≤")
        else:
            print("‚è∞ –í—Å–µ –Ω–∞ cooldown")

        return completed > 0

    def run_forever(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∑–∞–≤–∏—Å–∞–Ω–∏–π"""
        print("\nüîÑ –£–õ–¨–¢–†–ê-–°–¢–ê–ë–ò–õ–¨–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì")
        print("‚ö° Timeout 8 —Å–µ–∫ –Ω–∞ –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å")
        print("üöÄ –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
        print("Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")

        cycle_count = 0

        try:
            while True:
                cycle_count += 1
                print(f"\n>>> –¶–ò–ö–õ #{cycle_count} <<<")

                try:
                    self.run_cycle()

                    # –ë–´–°–¢–†–ê–Ø –ø–∞—É–∑–∞
                    print("‚è∞ –ü–∞—É–∑–∞ 3 —Å–µ–∫...")
                    for i in range(3):
                        time.sleep(1)
                        print(".", end="", flush=True)
                    print()

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞: {e}")
                    time.sleep(1)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞

        except KeyboardInterrupt:
            print("\n\nüõë –û–°–¢–ê–ù–û–í–õ–ï–ù–û")
            print(f"–¶–∏–∫–ª–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {cycle_count}")


def main():
    print("üö® ULTRA STABLE NEWS FETCHER")
    print("‚ö° –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ò–°–ê–ù–ò–Ø –ù–ê 11 –¶–ò–ö–õ–ï")
    print("=" * 50)

    try:
        fetcher = UltraStableFetcher()

        if not fetcher.clients:
            print("\n‚ùå –ù–µ—Ç API –∫–ª—é—á–µ–π!")
            return

        print("\n‚ö° –ó–ê–©–ò–¢–ê –û–¢ –ó–ê–í–ò–°–ê–ù–ò–ô:")
        print("‚Ä¢ Timeout 8 —Å–µ–∫ –Ω–∞ –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å")
        print("‚Ä¢ Threading –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π") 
        print("‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–æ–≤")

        print("\n–†–µ–∂–∏–º—ã:")
        print("1 - –¢–µ—Å—Ç–æ–≤—ã–π —Ü–∏–∫–ª")
        print("2 - –£–ª—å—Ç—Ä–∞-—Å—Ç–∞–±–∏–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")

        choice = input("\n–í—ã–±–æ—Ä (1-2): ").strip()

        if choice == "1":
            fetcher.run_cycle()
        else:
            fetcher.run_forever()

    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()
